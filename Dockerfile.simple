# Simple Dockerfile for Redis Queue System
FROM golang:1.21 AS builder

# Build arguments
ARG GIT_COMMIT=unknown
ARG BUILD_DATE=unknown  
ARG VERSION=dev

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the applications
RUN CGO_ENABLED=0 GOOS=linux go build \
    -ldflags="-w -s -X 'main.GitCommit=${GIT_COMMIT}' -X 'main.BuildDate=${BUILD_DATE}' -X 'main.Version=${VERSION}'" \
    -o queue-server ./cmd/queue-server

RUN CGO_ENABLED=0 GOOS=linux go build \
    -ldflags="-w -s -X 'main.GitCommit=${GIT_COMMIT}' -X 'main.BuildDate=${BUILD_DATE}' -X 'main.Version=${VERSION}'" \
    -o queue-cli ./cmd/queue-cli

# Production stage - using distroless for security
FROM gcr.io/distroless/static-debian11:nonroot

# Labels for metadata
LABEL org.opencontainers.image.title="Redis Queue System"
LABEL org.opencontainers.image.description="High-performance message queue system built on Redis Streams"
LABEL org.opencontainers.image.vendor="harshaweb"
LABEL org.opencontainers.image.source="https://github.com/harshaweb/Queue"
LABEL org.opencontainers.image.url="https://github.com/harshaweb/Queue"
LABEL org.opencontainers.image.documentation="https://github.com/harshaweb/Queue/blob/main/README.md"

WORKDIR /app

# Copy binaries from builder stage
COPY --from=builder /app/queue-server .
COPY --from=builder /app/queue-cli .

# Expose ports
EXPOSE 8080 9090 2112

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD ["/app/queue-server", "--health-check"]

# Use the queue-server as the default command
ENTRYPOINT ["/app/queue-server"]