syntax = "proto3";

package queue.v1;

option go_package = "github.com/harshaweb/Queue/proto/queue/v1";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";

// QueueService provides queue operations
service QueueService {
  // Message operations
  rpc Enqueue(EnqueueRequest) returns (EnqueueResponse);
  rpc BatchEnqueue(BatchEnqueueRequest) returns (BatchEnqueueResponse);
  rpc Consume(ConsumeRequest) returns (stream ConsumeResponse);
  rpc Ack(AckRequest) returns (AckResponse);
  rpc Nack(NackRequest) returns (NackResponse);
  
  // Advanced operations
  rpc MoveToLast(MoveToLastRequest) returns (MoveToLastResponse);
  rpc Skip(SkipRequest) returns (SkipResponse);
  rpc Requeue(RequeueRequest) returns (RequeueResponse);
  rpc MoveToDeadLetter(MoveToDeadLetterRequest) returns (MoveToDeadLetterResponse);
  
  // Queue management
  rpc CreateQueue(CreateQueueRequest) returns (CreateQueueResponse);
  rpc DeleteQueue(DeleteQueueRequest) returns (DeleteQueueResponse);
  rpc GetQueueStats(GetQueueStatsRequest) returns (GetQueueStatsResponse);
  rpc ListQueues(ListQueuesRequest) returns (ListQueuesResponse);
  
  // Admin operations
  rpc PauseQueue(PauseQueueRequest) returns (PauseQueueResponse);
  rpc ResumeQueue(ResumeQueueRequest) returns (ResumeQueueResponse);
  rpc GetConsumerGroups(GetConsumerGroupsRequest) returns (GetConsumerGroupsResponse);
  
  // Health check
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

// Message definitions
message Message {
  string id = 1;
  google.protobuf.Struct payload = 2;
  map<string, string> headers = 3;
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp schedule_at = 5;
  int32 retry_count = 6;
  string queue_name = 7;
}

message MessageOptions {
  int32 priority = 1;
  google.protobuf.Timestamp schedule_at = 2;
  google.protobuf.Duration delay = 3;
  google.protobuf.Duration ttl = 4;
  map<string, string> headers = 5;
}

message ConsumeOptions {
  google.protobuf.Duration visibility_timeout = 1;
  int32 max_retries = 2;
  BackoffPolicy backoff_policy = 3;
  int32 batch_size = 4;
  bool long_poll = 5;
  google.protobuf.Duration long_poll_timeout = 6;
}

message BackoffPolicy {
  BackoffType type = 1;
  google.protobuf.Duration initial_wait = 2;
  google.protobuf.Duration max_wait = 3;
  double multiplier = 4;
}

enum BackoffType {
  BACKOFF_TYPE_EXPONENTIAL = 0;
  BACKOFF_TYPE_LINEAR = 1;
  BACKOFF_TYPE_FIXED = 2;
}

message QueueConfig {
  string name = 1;
  google.protobuf.Duration visibility_timeout = 2;
  int32 max_retries = 3;
  bool dead_letter_enabled = 4;
  string dead_letter_queue = 5;
  BackoffPolicy backoff_policy = 6;
  int32 max_consumers = 7;
  google.protobuf.Duration message_retention = 8;
}

message QueueStats {
  string name = 1;
  int64 length = 2;
  int64 in_flight = 3;
  int64 processed = 4;
  int64 failed = 5;
  int32 consumer_count = 6;
  google.protobuf.Timestamp last_activity = 7;
  int64 dead_letter_size = 8;
}

message ConsumerGroup {
  string name = 1;
  int32 consumers = 2;
  int64 pending = 3;
  string last_id = 4;
}

// Request/Response messages
message EnqueueRequest {
  string queue_name = 1;
  google.protobuf.Struct payload = 2;
  MessageOptions options = 3;
}

message EnqueueResponse {
  string message_id = 1;
  string queue_name = 2;
}

message BatchEnqueueRequest {
  string queue_name = 1;
  repeated google.protobuf.Struct payloads = 2;
  MessageOptions options = 3;
}

message BatchEnqueueResponse {
  repeated string message_ids = 1;
  string queue_name = 2;
  int32 count = 3;
}

message ConsumeRequest {
  string queue_name = 1;
  ConsumeOptions options = 2;
}

message ConsumeResponse {
  Message message = 1;
  string error = 2;
}

message AckRequest {
  string queue_name = 1;
  string message_id = 2;
}

message AckResponse {
  bool success = 1;
}

message NackRequest {
  string queue_name = 1;
  string message_id = 2;
  bool requeue = 3;
}

message NackResponse {
  bool success = 1;
}

message MoveToLastRequest {
  string queue_name = 1;
  string message_id = 2;
}

message MoveToLastResponse {
  bool success = 1;
}

message SkipRequest {
  string queue_name = 1;
  string message_id = 2;
  google.protobuf.Duration duration = 3;
}

message SkipResponse {
  bool success = 1;
}

message RequeueRequest {
  string queue_name = 1;
  string message_id = 2;
  google.protobuf.Duration delay = 3;
}

message RequeueResponse {
  bool success = 1;
}

message MoveToDeadLetterRequest {
  string queue_name = 1;
  string message_id = 2;
}

message MoveToDeadLetterResponse {
  bool success = 1;
}

message CreateQueueRequest {
  QueueConfig config = 1;
}

message CreateQueueResponse {
  bool success = 1;
}

message DeleteQueueRequest {
  string queue_name = 1;
}

message DeleteQueueResponse {
  bool success = 1;
}

message GetQueueStatsRequest {
  string queue_name = 1;
}

message GetQueueStatsResponse {
  QueueStats stats = 1;
}

message ListQueuesRequest {
}

message ListQueuesResponse {
  repeated string queue_names = 1;
}

message PauseQueueRequest {
  string queue_name = 1;
}

message PauseQueueResponse {
  bool success = 1;
}

message ResumeQueueRequest {
  string queue_name = 1;
}

message ResumeQueueResponse {
  bool success = 1;
}

message GetConsumerGroupsRequest {
  string queue_name = 1;
}

message GetConsumerGroupsResponse {
  repeated ConsumerGroup consumer_groups = 1;
}

message HealthCheckRequest {
}

message HealthCheckResponse {
  bool healthy = 1;
  string message = 2;
}