# Default values for redis-queue.
# This is a YAML-formatted file.

# Global settings
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Image settings
image:
  registry: docker.io
  repository: redis-queue/queue-server
  tag: "latest"
  pullPolicy: IfNotPresent

# Deployment settings
replicaCount: 3

# Service settings
service:
  type: ClusterIP
  port: 8080
  metricsPort: 9090
  annotations: {}

# Ingress settings
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: queue.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
    # - secretName: redis-queue-tls
    #   hosts:
    #     - queue.local

# Autoscaling settings
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# Resource settings
resources:
  requests:
    memory: "128Mi"
    cpu: "100m"
  limits:
    memory: "512Mi"
    cpu: "500m"

# Pod settings
podAnnotations:
  prometheus.io/scrape: "true"
  prometheus.io/port: "9090"
  prometheus.io/path: "/metrics"

podSecurityContext:
  fsGroup: 1000

securityContext:
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
    - ALL

# Node assignment
nodeSelector: {}
tolerations: []
affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - redis-queue
        topologyKey: kubernetes.io/hostname

# Health checks
livenessProbe:
  httpGet:
    path: /health
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /ready
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  failureThreshold: 3

# Service Account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# RBAC
rbac:
  create: true

# Configuration
config:
  server:
    port: 8080
    metricsPort: 9090
    timeout: "30s"
    enableAuth: false
  
  queue:
    defaultVisibilityTimeout: "30s"
    defaultMaxRetries: 3
    cleanupInterval: "5m"
    maxStreamLength: 10000
    consumerTimeout: "60s"
  
  observability:
    metricsEnabled: true
    tracingEnabled: true
    jaegerEndpoint: "http://jaeger-collector:14268/api/traces"
  
  logging:
    level: info
    format: json

# Redis configuration
redis:
  enabled: true
  auth:
    enabled: false
    password: ""
  
  master:
    persistence:
      enabled: true
      size: 10Gi
    resources:
      requests:
        memory: 256Mi
        cpu: 100m
      limits:
        memory: 2Gi
        cpu: 500m
  
  replica:
    replicaCount: 2
    persistence:
      enabled: true
      size: 10Gi
    resources:
      requests:
        memory: 256Mi
        cpu: 100m
      limits:
        memory: 2Gi
        cpu: 500m
  
  sentinel:
    enabled: true
    masterSet: mymaster
    quorum: 2
    downAfterMilliseconds: 5000
    failoverTimeout: 10000
    parallelSyncs: 1

# External Redis (when redis.enabled is false)
externalRedis:
  host: ""
  port: 6379
  password: ""
  database: 0
  sentinelMasterName: ""
  sentinelHosts: []

# Monitoring
monitoring:
  serviceMonitor:
    enabled: false
    namespace: ""
    labels: {}
    annotations: {}
    interval: 30s
    scrapeTimeout: 10s

# Network policies
networkPolicy:
  enabled: false
  ingress: []
  egress: []

# Pod Disruption Budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Extra environment variables
extraEnvVars: []
  # - name: ENV_VAR
  #   value: "value"

# Extra volumes
extraVolumes: []
  # - name: extra-volume
  #   configMap:
  #     name: extra-configmap

# Extra volume mounts
extraVolumeMounts: []
  # - name: extra-volume
  #   mountPath: /extra/path

# Init containers
initContainers: []
  # - name: init-redis
  #   image: busybox:1.35
  #   command: ['sh', '-c', 'until nslookup redis; do echo waiting for redis; sleep 2; done;']

# Sidecar containers
sidecars: []
  # - name: sidecar-container
  #   image: sidecar:latest

# Testing
tests:
  enabled: true
  image:
    registry: docker.io
    repository: busybox
    tag: "1.35"
    pullPolicy: IfNotPresent