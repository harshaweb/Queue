apiVersion: v1
kind: Namespace
metadata:
  name: redis-queue
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-queue-config
  namespace: redis-queue
data:
  config.yaml: |
    server:
      port: 8080
      metrics_port: 9090
      timeout: 30s
      enable_auth: false
    
    redis:
      addresses:
        - redis-master:6379
      password: ""
      db: 0
      pool_size: 20
      min_idle_conns: 5
      max_retries: 3
      dial_timeout: 5s
      read_timeout: 3s
      write_timeout: 3s
      pool_timeout: 4s
      idle_timeout: 5m
      cluster_mode: false
      sentinel_mode: true
      master_name: "mymaster"
      sentinel_addrs:
        - redis-sentinel:26379
    
    queue:
      default_visibility_timeout: 30s
      default_max_retries: 3
      cleanup_interval: 5m
      max_stream_length: 10000
      consumer_timeout: 60s
    
    observability:
      metrics_enabled: true
      tracing_enabled: true
      jaeger_endpoint: "http://jaeger-collector:14268/api/traces"
    
    logging:
      level: info
      format: json
---
apiVersion: v1
kind: Secret
metadata:
  name: redis-queue-secrets
  namespace: redis-queue
type: Opaque
data:
  redis-password: ""  # base64 encoded password
  jwt-private-key: ""  # base64 encoded JWT private key
  jwt-public-key: ""   # base64 encoded JWT public key
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-queue-server
  namespace: redis-queue
  labels:
    app: redis-queue-server
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: redis-queue-server
  template:
    metadata:
      labels:
        app: redis-queue-server
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - redis-queue-server
              topologyKey: kubernetes.io/hostname
      containers:
      - name: queue-server
        image: redis-queue:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: CONFIG_PATH
          value: "/etc/config/config.yaml"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-queue-secrets
              key: redis-password
              optional: true
        volumeMounts:
        - name: config
          mountPath: /etc/config
        - name: secrets
          mountPath: /etc/secrets
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config
        configMap:
          name: redis-queue-config
      - name: secrets
        secret:
          secretName: redis-queue-secrets
      serviceAccountName: redis-queue-server
      securityContext:
        fsGroup: 1000
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: redis-queue-server
  namespace: redis-queue
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: redis-queue-server
  namespace: redis-queue
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: redis-queue-server
  namespace: redis-queue
subjects:
- kind: ServiceAccount
  name: redis-queue-server
  namespace: redis-queue
roleRef:
  kind: Role
  name: redis-queue-server
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  name: redis-queue-service
  namespace: redis-queue
  labels:
    app: redis-queue-server
spec:
  selector:
    app: redis-queue-server
  ports:
  - name: http
    port: 8080
    targetPort: 8080
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  type: ClusterIP
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: redis-queue-hpa
  namespace: redis-queue
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: redis-queue-server
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: redis-queue-ingress
  namespace: redis-queue
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - queue.example.com
    secretName: redis-queue-tls
  rules:
  - host: queue.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: redis-queue-service
            port:
              number: 8080