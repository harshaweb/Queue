version: '3.8'

services:
  # Redis service
  redis:
    image: redis:7-alpine
    container_name: redis-queue
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --save 60 1
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - queue-network

  # Queue server
  queue-server:
    build: .
    container_name: queue-server
    ports:
      - "8080:8080"    # HTTP API
      - "9090:9090"    # gRPC API
      - "2112:2112"    # Prometheus metrics
    depends_on:
      redis:
        condition: service_healthy
    environment:
      # Redis Configuration
      - REDIS_ADDRESSES=redis:6379
      - REDIS_PASSWORD=
      - REDIS_DB=0
      
      # Server Configuration
      - HTTP_PORT=8080
      - GRPC_PORT=9090
      - LOG_LEVEL=info
      
      # Authentication
      - JWT_SECRET=your-secret-key-change-in-production
      - API_KEYS=admin-key:admin,user-key:user
      
      # Monitoring
      - PROMETHEUS_ENABLED=true
      - PROMETHEUS_PORT=2112
      - TRACING_ENABLED=true
      
      # Queue Defaults
      - DEFAULT_VISIBILITY_TIMEOUT=30s
      - DEFAULT_MAX_RETRIES=3
      - MAX_MESSAGE_SIZE=1MB
    volumes:
      - queue_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - queue-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-queue
    ports:
      - "9091:9090"  # Use different port to avoid conflict
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./deploy/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    depends_on:
      - queue-server
    networks:
      - queue-network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-queue
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deploy/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./deploy/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - queue-network

  # Redis Insight for Redis management (optional)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: redis-insight
    ports:
      - "8001:8001"
    volumes:
      - redis_insight_data:/db
    depends_on:
      - redis
    networks:
      - queue-network
    profiles:
      - tools

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_insight_data:
    driver: local
  queue_logs:
    driver: local

networks:
  queue-network:
    driver: bridge